!function(){"use strict";var TemplateView=Backbone.View.extend({initialize:function(options){_.extend(this,options)},destroy:function(){},getTagName:function(){return this.tagName||"div"}}).extend({initialize:function(){this.template=this.template||"",this.setTemplate(this.template),this.setModel(void 0===this.model?"":this.model),TemplateView.__super__.initialize.apply(this,arguments)},render:function(){TemplateView.__super__.render.apply(this,arguments),this.$el.html(Mustache.render(this.template,this.inject(this.model))),this.delegateEvents(),this.trigger("rendered")},inject:function(model){return model.toJSON?model.toJSON():model},setModel:function(model){this.model&&this.model.bind&&this.stopListening(this.model),this.model=model,this.manualUpdate||this.model&&this.model.bind&&this.listenTo(this.model,"change reset add remove",this.render)},setTemplate:function(template){this.template=template,Mustache.parse(template)},getModel:function(){return this.model}}),ComponentView=TemplateView.extend({initialize:function(){if(this.components=this.components||{},ComponentView.__super__.initialize.apply(this,arguments),this.component){var contentOptions={};this.forwardModel?contentOptions.model=this.model:this.forwardProperty&&(contentOptions.model=this.model.get(this.forwardProperty)),this.component=new this.component(_.extend(contentOptions,this.componentOptions)),this.components[this.getTagName()]=this.component}},render:function(){ComponentView.__super__.render.apply(this,arguments);var that=this;this.eachComponent(function(component,selector){component.render();var toElement=that.$el.is(selector)?that.$el:that.$el.find(selector).first();component.$el.appendTo(toElement)}),this.trigger("componentsRendered")},destroy:function(){this.eachComponent(function(component){component.destroy()}),ComponentView.__super__.destroy.apply(this,arguments)},setModel:function(model){ComponentView.__super__.setModel.apply(this,arguments),this.component&&this.forwardModel&&this.component.setModel(model)},eachComponent:function(callback){for(var prop in this.components){var value=_.result(this.components,prop);(Array.isArray(value)?value:[value]).forEach(function(component){callback(component,prop)})}}}),Component=TemplateView.extend({inject:function(model){return{data:model&&model.get?model.get(this.property):model}}}),TextInputComponent=Component.extend({tagName:"input",events:{change:"change",keyup:"keyup"},initialize:function(){TextInputComponent.__super__.initialize.apply(this,arguments)},change:function(e){var val=e.target.value;!this.manualUpdate&&this.model.set&&this.model.set(this.property,val,{silent:!this.setLoud}),this.onChange&&this.onChange(val,e)},keyup:function(e){var val=e.target.value;!this.manualUpdateKeyup&&this.model.set&&this.model.set(this.property,val,{silent:!this.setLoud}),this.onKeyup&&this.onKeyup(val,e)},render:function(){TextInputComponent.__super__.render.apply(this,arguments),this.$el.val(this.model.get(this.property))}}),ButtonComponent=Component.extend({tagName:"button",events:{click:"click"},initialize:function(){this.template=this.template||"{{data}}",ButtonComponent.__super__.initialize.apply(this,arguments)},click:function(e){this.onClick&&this.onClick(e,this.model)}}),HidableComponent=ComponentView.extend({render:function(){HidableComponent.__super__.render.apply(this,arguments);var visibility=this.isHidden?this.isHidden(this.model):this.model.get(this.property);this.$el.css("display",visibility?this.displayType||"block":"none")}}),ToggleGroupComponent=ComponentView.extend({initialize:function(){ToggleGroupComponent.__super__.initialize.apply(this,arguments);var that=this,hidableDefaults={},buttonDefaults={};this.forwardModel&&(hidableDefaults.model=this.model,buttonDefaults.model=this.model),this.content=new HidableComponent(_.extend(hidableDefaults,this.hidableOptions,{isHidden:function(model){return!that.isHidden}})),this.toggleButton=new ButtonComponent(_.extend(buttonDefaults,this.buttonOptions,{onClick:function(){that.toggle()}})),this.isHidden=!0,this.components[this.getTagName()]=[this.toggleButton,this.content]},setModel:function(model){ToggleGroupComponent.__super__.setModel.apply(this,arguments),this.forwardModel&&this.eachComponent(function(component){component.setModel(model)})},render:function(model){ToggleGroupComponent.__super__.render.apply(this,arguments),this.$el.toggleClass("expanded",!this.isHidden)},toggle:function(e){this.isHidden=!this.isHidden,this.updateFromToggle(e)},expand:function(){this.isHidden=!1,this.updateFromToggle(e)},collapse:function(){this.isHidden=!0,this.updateFromToggle(e)},updateFromToggle:function(e){this.render(),this.onToggle&&this.onToggle(this.isHidden,e)}}),RepeaterComponent=ComponentView.extend({initialize:function(){this.template="",this.components={},this.components[this.getTagName()]=[],RepeaterComponent.__super__.initialize.apply(this,arguments)},render:function(){this.updateComponents(),RepeaterComponent.__super__.render.apply(this,arguments)},updateComponents:function(){for(var componentList=this.components[this.getTagName()],actualLength=this.model.length,currentLength=componentList?componentList.length:0,smallestLength=actualLength<currentLength?actualLength:currentLength,i=0;i<smallestLength;i++)componentList[i]&&!this.alwaysFresh?componentList[i].setModel(this.getModelAt(i)):componentList[i]=this.makeNewComponent({model:this.getModelAt(i)});if(currentLength<actualLength)for(var j=smallestLength;j<actualLength;j++)componentList[j]=this.makeNewComponent({model:this.getModelAt(j)});else if(actualLength<currentLength)for(var k=smallestLength;k<currentLength;k++)delete componentList[k]},getModelAt:function(i){return this.model.models?this.model.models[i]:this.model[i]},makeNewComponent:function(options){return new this.modelComponent(_.extend(options,this.modelOptions))}}),LinkComponent=Component.extend({events:{click:"click"},tagName:"a",initialize:function(){this.template="{{data}}",LinkComponent.__super__.initialize.apply(this,arguments)},click:function(e){this.onClick&&this.onClick(e)}}),RowComponent=ComponentView.extend({initialize:function(){this.template='<td class="name"></td><td class="type"></td><td class="updated"></td><td class="options"></td>',RowComponent.__super__.initialize.apply(this,arguments);var that=this;this.link=new LinkComponent({model:this.model,property:this.property}),this.button=new ButtonComponent({model:new Backbone.Model({label:"Remove"}),property:"label",onClick:function(e){that.onClick&&that.onClick(e,that.model)}}),this.components[".name"]=this.link,this.components[".options"]=this.button},setModel:function(model){RowComponent.__super__.setModel.apply(this,arguments),this.link&&this.link.setModel(model)}}),RadioComponent=Component.extend({tagName:"label",events:{"change input":"change"},initialize:function(){this.template='<input type="radio" {{#checked}}checked{{/checked}}/>{{data}}',RadioComponent.__super__.initialize.apply(this,arguments)},change:function(e){this.onChange&&this.onChange(e,this.model)},render:function(){RadioComponent.__super__.render.apply(this,arguments);var $input=this.$el.find("input"),id="radio_"+(this.id||this.cid);this.$el.attr("for",id),$input.attr("id",id),$input.attr("name",this&&this.group||this.id||this.cid)},inject:function(model){var data=RadioComponent.__super__.inject.apply(this,arguments);return data.checked=_.result(this,"isChecked"),data}}),RadioGroupComponent=RepeaterComponent.extend({initialize:function(options){this.modelOptions=options.modelOptions||{},_.extend(this.modelOptions,{group:options.id||this.id||this.cid,property:options.property}),this.modelComponent=RadioComponent,RadioGroupComponent.__super__.initialize.apply(this,arguments)}}),App=Backbone.Model.extend({initialize:function(){var that=this;this.mainView=new ComponentView({template:'Welcome to the Component Prototype App!<div class="testDiv"></div>',model:""});var model=new Backbone.Model({name:"item"}),collection=new Backbone.Collection,input=new TextInputComponent({model:model,property:"name"}),button=new ButtonComponent({model:"Add",onClick:function(e){var name=model.get("name");collection.add({name:name}).trigger("change"),model.set("name","")}});this.selected="item";var list=new RadioGroupComponent({model:collection,property:"name",modelOptions:{isChecked:function(){return this.model.get("name")==that.selected},onChange:function(e,model){that.selected=model.get("name")}}}),repeater=new RepeaterComponent({model:collection,modelComponent:ToggleGroupComponent,modelOptions:{forwardModel:!0,buttonOptions:{property:"name"},hidableOptions:{component:TextInputComponent,forwardModel:!0,componentOptions:{property:"name"}}}}),toggle=new ToggleGroupComponent({buttonOptions:{model:"Toggle Table"},model:model,hidableOptions:{component:ComponentView,componentOptions:{tagName:"table",template:"<thead><th>Template name</th><th>Type</th><th>Last updated</th><th>Options</th></thead>",component:RepeaterComponent,componentOptions:{tagName:"tbody",model:collection,modelComponent:RowComponent,modelOptions:{tagName:"tr",property:"name",onClick:function(e,model){collection.remove(model).trigger("change")}}}}}});this.mainView.components[".testDiv"]=[list,input,button,repeater,toggle],this.mainView.render(),$("body").append(this.mainView.$el)}});window.App=new App}();